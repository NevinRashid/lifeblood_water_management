<?php

namespace Modules\ActivityLog\Services;

use App\Services\Base\BaseService;
use Spatie\Activitylog\Models\Activity;

/**
 * Service class for handling business logic related to activity logs
 *
 * This service provides methods to query and filter activity log records
 * generated by the Spatie Activitylog package
 */
class ActivityLogService extends BaseService
{
    /**
     * ActivityLogService constructor
     *
     * @param \Spatie\Activitylog\Models\Activity $model The activity log model instance
     */
    public function __construct(Activity $model)
    {
        // Set the Activity model as the primary model for this service
        $this->model = $model;
    }

    /**
     * Build a query for fetching activity logs with optional filters
     *
     * Extends the base query to allow filtering by log_name, event, and custom sorting
     *
     * @param array $filters An array of filters to apply to the query
     * @option string $log_name Filter by a specific log name
     * @option string $event Filter by a specific event (e.g., 'created', 'updated')
     * @option string $sort_by Column to sort the results by
     * @option string $sort_direction Sorting direction ('asc' or 'desc')
     *
     * @return mixed The result of the handle method, typically a query builder or response
     */
    public function query(array $filters = [])
    {
        // Start with the base query from the parent service
        $query = parent::query($filters);

        // Wrap the custom filtering logic in the base service's handler
        return $this->handle(function () use ($filters, $query) {
            return $query
                // Filter by a specific log name if provided
                ->when(isset($filters['log_name']), fn ($q) => $q->where('log_name', $filters['log_name']))

                // Filter by a specific event name if provided
                ->when(isset($filters['event']), fn ($q) => $q->where('event', $filters['event']))

                // Apply custom sorting if a 'sort_by' column is provided
                ->when(isset($filters['sort_by']), function ($q) use ($filters) {
                    // Default to descending order if no direction is specified
                    $direction = $filters['sort_direction'] ?? 'desc';
                    $q->orderBy($filters['sort_by'], $direction);
                });
        });
    }
}